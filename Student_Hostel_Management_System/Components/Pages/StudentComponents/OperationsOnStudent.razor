@page "/OperationsOnStudent"
@page "/OperationsOnStudent/{Id:Guid}"


@using Student_Hostel_Management_System.Data.Entites
@using Student_Hostel_Management_System.Services.Interfaces
@inject NavigationManager NavigationManager
@inject IAdminstrationDataService AdminDataSevice
@inject IStudentsDataService StudentsDataService

@inject ISnackbar Snackbar

@rendermode InteractiveServer

<MudDialog>
	<TitleContent>
		<h3>@(IsEditMode ? "تعديل بيانات الطالب" : "إضافة طالب جديد")</h3>
	</TitleContent>
	<DialogContent>
		<MudPaper Class="p-4" dir="rtl">
			<MudTextField @bind-Value="Student.StudentId" Label="الرقم الدراسي" />
			<MudTextField @bind-Value="Student.Name" Label="الاسم" />
			<MudTextField @bind-Value="Student.Phone" Label="رقم الهاتف" />
			<MudTextField @bind-Value="Student.Email" Label="البريد الإلكتروني" />
			<MudTextField @bind-Value="Student.Address" Label="العنوان" />
			<MudSelect @bind-Value="Student.AdminId" Label="مدير النزل">
				@foreach (var admin in Administrations)
				{
					<MudSelectItem Value="@admin.Id">@admin.Name - Hostel @admin.HostelNo</MudSelectItem>
				}
			</MudSelect>
		</MudPaper>
	</DialogContent>
	<DialogActions>
		<MudPaper Class="d-flex flex-row flex-grow-1 gap-4" Elevation="0">
			<MudFileUpload T="IBrowserFile"
			               Accept=".pdf"
			               FilesChanged="UploadFiles2"
			               MaximumFileCount="100">
				<ActivatorContent>
					<MudButton Variant="Variant.Filled"
					           Color="Color.Primary"
					           StartIcon="@Icons.Material.Filled.CloudUpload">
						Only .pdf files
					</MudButton>
				</ActivatorContent>
			</MudFileUpload>

			<MudButton OnClick="Save" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Success">
				@(IsEditMode ? "تعديل" : "حفظ")
			</MudButton>
		</MudPaper>
	</DialogActions>
</MudDialog>


<br />
<MudSpacer />
<br />


@if (files != null)
{
	<MudList T="string">
		@foreach (var file in files)
		{
			<MudListItem Icon="@Icons.Material.Filled.AttachFile">
				@file.Name <code>@file.Size bytes</code>
			</MudListItem>
		}
	</MudList>
}
@code {

	[Parameter]
	public string Id { get; set; } = string.Empty;

	[Parameter]
	public bool? IsSelfRegistration { get; set; } = false;

	private Student Student { get; set; } = new Student();

	private bool IsEditMode;

	private List<Admin> Administrations { get; set; } = new List<Admin>();

	protected override async Task OnInitializedAsync()
	{
		Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
		IsEditMode = !string.IsNullOrEmpty(Id);

		// جلب قائمة المدراء
		Administrations = await AdminDataSevice.GetAll();

		if (IsEditMode)
		{
			var existing = await StudentsDataService.GetById(Guid.Parse(Id));
			if (existing != null)
			{
				Student = existing;
			}
			else
			{
				NavigationManager.NavigateTo("/NotFound");
			}
		}
	}


	private async Task Save()
	{
		if (IsEditMode)
		{
			await StudentsDataService.Update(Guid.Parse(Id), Student);
			// Optionally navigate back to the list or show a success message
			// add a snackbar message
			Snackbar.Add("تم التعديل بنجاح", Severity.Success);
		}
		else
		{
			await StudentsDataService.Add(Student);
			Snackbar.Add("تم الاضافة بنجاح", Severity.Success);
			Student = new Student(); // Reset the form after adding
		}

	}
	
	

	IList<IBrowserFile> files = new List<IBrowserFile>();
	private void UploadFiles(IReadOnlyList<IBrowserFile> files)
	{
		foreach (var file in files)
		{
			this.files.Add(file);
		}
		//TODO upload the files to the server
	}

	private void UploadFiles2(IBrowserFile file)
	{
		files.Add(file);
		//TODO upload the files to the server
	}
}